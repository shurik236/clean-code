Декомпозиция задания Markdown

1. class Md
   * Tokenizer tokenizer (Сущность, позволяющая переводить строку в набор токенов по определенным правилам)
   * HtmlBuilder htmlBuilder (Сущность, которая принимает корректный набор токенов и преобразует его в html-код)
   * SyntaxProcessor syntaxProcessor (Находит и устраняет синтаксические ошибки согласно спецификации)
   + RenderToHtml (string -> string) (Принимает строку в md, возвращает строку в html
   
2. class Tokenizer
   + Tokenize (string -> List<Token>) (Принимает строку в md, возвращает набор токенов)
   + (private) ReadNextToken (считывает следующий токен из строки)
   
3. class SyntaxProcessor
   + FixSyntaxErrors (List<Token> -> List<Token>) 
   (Последовательно выполняет FixInlineOrInspaceUnderscore -> ResolveNonMatchingTags -> UnescapeSpecialSymbols)
   + (private) ResolveNonMatchingTags 
   (Обащает в текст непарные теги, находит теги которые можно поправить чтобы они стали парными, затем выполняет FixInvalidTags)
   + (private) FixInvalidTags (Преобразует виды тегов, образуя пары. Добавляет появившиеся символы подчеркивания.)
   + (private) FixInlineOrInspaceUnderscore (Обращает подчеркивания стоящие внутри текста или сами по себе в текст)
   + (private) UnescapeSpecialSymbols (Обращает escape-символы в обычный текст)
   (самый тяжелый класс, возможно придется дробить его еще мельче)
   
4. class HtmlBuilder
   + TokensToHtml (List<Token> -> string) (принимает набор токенов и преобразует их в html-код)
   
5. class Token
   * string Value (текстовое значение токена)
   * TokenType Type (Тип токена - пробел, символ, тег)
   + IsTag (Является ли токен тегом)
   
6. enum TokenType
